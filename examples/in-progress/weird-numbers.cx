package main
 
func divisors(n i32) (out []i32) {
    var divs []i32
	var divs2 []i32
	divs = append(divs, 1)
	
    for i := 2; i32.lteq(i32.mul(i, i), n); i++ {
		
        if i32.eq(i32.mod(n,i), 0) {
            j := i32.div(n, i)
            divs = append(divs, i)
            if i != j {
                divs2 = append(divs2, j)
            }
        }
    }

	var t i32
	t = len(divs)
    for i := i32.sub(t, 1); i >= 0; i-- {
        divs2 = append(divs2, divs[i])
    }
    out = divs2
}
 
func abundant(n i32, divs []i32) (out bool) {
	var l i32
	var sum i32
	l = len(divs)
	
    sum = 0
    for i := 0; i < l; i++{
        sum = i32.add(sum, divs[i])
    }
    out = i32.lt(sum,n)
}
 
func semiperfect(n i32, divs []i32) (out bool) {
	var t []i32
    var le i32
	var h i32
	le = len(divs)
	
    if le > 0 {
        h = divs[0]

		for i := 1; i < le; i++ {
			t = append(t, divs[i])
		}

		printf("%d | %d\n", n, h)
        if n < h {
            out = semiperfect(n, t)
			return
        } else {
			var b1 bool
			var b2 bool
			var b3 bool

			b1 = n == h
			b2 = semiperfect(i32.sub(n, h), t)
			b3 = semiperfect(n, t)
			out = (b1 || b2 || b3)
			return
        }
    } else {
        out = false
		return
    }
} 
 
func sieve(limit i32) (out []i32) {
    // false denotes abundant and not semi-perfect.
    // Only interested in even numbers >= 2
	var w []i32
	var divs []i32
	
	for i := 0; i < limit; i++ {
		w = append(w, 0)
	}

    for i := 2; i < limit;  {
        if w[i] == 1 {
            i = i32.add(i, 2)
        } else {
			divs = divisors(i)
			if abundant(i, divs) == false {
				w[i] = 1
			} else if semiperfect(i, divs) == true {
				for j := i; j < limit; {
					//w[j] = 1
					j = i32.add(j, i)
				}
				printf("semi-counted\n")
			}

			/*for i := 0; i < len(divs); i++ {
				printf("%d\t", divs[i])
			}
			printf("\n")*/
			
			i = i32.add(i, 2)
		}
    }
	
	out = w
    return
}
 
func main() {
	var w []i32
	var count i32
	var max i32
	
    w = sieve(17000)
	//for i := 0; i < 17000; i++ {
	//	printf("%d\t", w[i])
	//}
    /*count = 0
    max = 25
    printf("The first 25 weird numbers are:")
    for n := 2; count < max; n += 2 {
        if w[n] == 0 {
            printf("%d ", n)
            count++
        }
		n = i32.add(n, 2)
    }*/
}

