package main
 
func zr(fib0 i32, fib1 i32, n i32, bit i32) (out1 i32, out2 i32) {
    if fib1 > n {
		out1 = n
		out2 = 0
		return
    }
    // recurse
    remaining, set = zr(fib1, fib0+fib1, n, bit+1)
    if fib1 <= remaining {
        set |= 1 << bit
        remaining -= fib1
    }
    return
}

func zeckendorf(n i32) (out i32) {
    // start with fib0 = 1 and fib1 = 1
    _, set := zr(1, 1, n, 0)
    return set
}

func main() {
    for i := 0; i <= 20; i++ {
        fmt.Printf("%2d %7b\n", i, zeckendorf(i))
    }
}
