package main
 
func gcd(n i32, k i32) (out i32) {
    if i32.lt(n, k) || i32.lt(k, 1) {
        out = 0
		return
    }

	var bitN i32
	var bitK i32
	var bitTrue bool
    var s i32
	
	s = 1
	bitN = i32.bitand(n,1)
	bitK = i32.bitand(k,1)
	bitTrue = i32.eq(bitN,0) && i32.eq(bitK,0)
	printf("(%d, %d)\n", bitN, bitK)
	bool.print(bitTrue)
	
    for ; bitTrue == true; {
    	n = i32.bitshr(n,1)
		k = i32.bitshr(k,1)
		s = i32.bitshl(s,1)

		bitN = i32.bitand(n,1)
		bitK = i32.bitand(k,1)
		bitTrue = i32.eq(bitN,0) && i32.eq(bitK,0)

		//printf("(%d, %d)\n", bitN, bitK)
		//bool.print(bitTrue)
    }

	var t i32
    t = n
	bitN = i32.bitand(n,1)
	//printf("---(%d, %d)\n", t, bitN)
    if i32.uneq(bitN, 0) {
        t = i32.mul(k,-1)
    }
    
    for ; i32.uneq(t,0); {

		var bitT i32
		bitT = i32.bitand(t,1)
		//printf("%d\t", bitT)
        for ; i32.eq(bitT, 0); {
			printf("=============")
            t = i32.bitshr(t,1)
			bitT = i32.bitand(t,1)
        }
	
        if i32.lt(t,0) {
            n = t
        } else {
            k = i32.mul(t,-1)
        }
		
        t = n - k
		printf("%d\t", t)
    }
    out = i32.mul(n,s)
}
 
func totient(n i32) (out i32) {
    tot := 0
    for k := 1; i32.lteq(k,n); k++ {
		//printf("%d, %d\n", n,k)
    	g := gcd(n,k)
        if i32.eq(g,1) {
            tot = i32.add(tot,1)
        }
    }
    out = tot
}
 
func main() {
	var count i32
	var tot i32
	var isPrime bool
	var tmp i32
	
    count = 0
    for n := 1; i32.lteq(n,25); n++ {
		
        tot = totient(n)
		tmp = i32.sub(n,1)
        isPrime = i32.eq(tmp, tot)
		
        if isPrime == true {
            count = i32.add(count,1)
        }

		i32.print(n)
		i32.print(tot)
		bool.print(isPrime)
		str.print("----------")
    }
    
    printf("\nNumber of primes up to 25 = %d", count)
	count = 0
    for n := 26; i32.lteq(n,100000); n++ {
		
        tot = totient(n)
		isPrime =  i32.eq(tot, i32.sub(n,1))
		if isPrime == true {
            count = i32.add(count,1)
        }
	
        if i32.eq(n,100) || i32.eq(n,1000) || i32.eq(i32.mod(n,10000),0) {
            printf("\nNumber of primes up to %-6d = %d\n", n, count)
        }
    }
}
